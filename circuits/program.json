{"noir_version":"1.0.0-beta.4+0044ffdfda7088bd14cf487b300ee3bfc00333e5","hash":"6281930150690935861","abi":{"parameters":[{"name":"statistic_threshold","type":{"kind":"integer","sign":"signed","width":8},"visibility":"private"},{"name":"dataset","type":{"kind":"array","length":9,"type":{"kind":"integer","sign":"signed","width":8}},"visibility":"private"}],"return_type":null,"error_types":{"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17929169945533822981":{"error_kind":"string","string":"This array is not sorted by absolute value as the test requires."}}},"bytecode":"","debug_symbols":"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","file_map":{"3":{"source":"use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    ///\n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    ///\n    /// example\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    ///\n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array along with its index,\n    /// returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.mapi(|i, a| i + a * 2);\n    /// assert_eq(b, [2, 5, 8]);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(i, self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// let mut i = 0;\n    /// a.for_each(|x| {\n    ///     b[i] = x;\n    ///     i += 1;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for i in 0..self.len() {\n            f(self[i]);\n        }\n    }\n\n    /// Applies a function to each element of this array along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// a.for_eachi(|i, x| {\n    ///     b[i] = x;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        for i in 0..self.len() {\n            f(i, self[i]);\n        }\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    ///\n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    ///\n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    ///\n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    ///\n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    ///\n    /// Requires the input array to be non-empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n\n    /// Concatenates this array with another array.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr1 = [1, 2, 3, 4];\n    ///     let arr2 = [6, 7, 8, 9, 10, 11];\n    ///     let concatenated_arr = arr1.concat(arr2);\n    ///     assert(concatenated_arr == [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    /// }\n    /// ```\n    pub fn concat<let M: u32>(self, array2: [T; M]) -> [T; N + M] {\n        let mut result = [crate::mem::zeroed(); N + M];\n        for i in 0..N {\n            result[i] = self[i];\n        }\n        for i in 0..M {\n            result[i + N] = array2[i];\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Ord + Eq,\n{\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a, b| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Eq,\n{\n    /// Returns a new sorted array by sorting it with a custom comparison function.\n    /// The original array remains untouched.\n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    ///\n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    ///\n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        // Safety: `sorted` array is checked to be:\n        // a. a permutation of `input`'s elements\n        // b. satisfying the predicate `ordering`\n        unsafe {\n            let sorted = quicksort::quicksort(self, ordering);\n\n            if !is_unconstrained() {\n                for i in 0..N - 1 {\n                    assert(\n                        ordering(sorted[i], sorted[i + 1]),\n                        \"Array has not been sorted correctly according to `ordering`.\",\n                    );\n                }\n                check_shuffle::check_shuffle(self, sorted);\n            }\n            sorted\n        }\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq([].map(|x| x + 1), []);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq([].mapi(|i, x| i * x + 1), []);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = [1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, [2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = [1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        let mut i = 0;\n        let i_ref = &mut i;\n        a.for_each(|x| {\n            b_ref[*i_ref] = x * 2;\n            *i_ref += 1;\n        });\n        assert_eq(b, [2, 4, 6]);\n        assert_eq(i, 3);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { b_ref[i] = i + a * 2; });\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn concat() {\n        let arr1 = [1, 2, 3, 4];\n        let arr2 = [6, 7, 8, 9, 10, 11];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    }\n\n    #[test]\n    fn concat_zero_length_with_something() {\n        let arr1 = [];\n        let arr2 = [1];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_something_with_zero_length() {\n        let arr1 = [1];\n        let arr2 = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_zero_lengths() {\n        let arr1: [Field; 0] = [];\n        let arr2: [Field; 0] = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, []);\n    }\n}\n","path":"std/array/mod.nr"},"22":{"source":"pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::wrapping_mul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test(should_fail)]\n    fn test_wrapping_mul() {\n        // This currently fails.\n        // See: https://github.com/noir-lang/noir/issues/7528\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, wrapping_mul(zero, one));\n\n        // 0*1==0\n        assert_eq(zero, wrapping_mul(one, zero));\n\n        // 1*1==1\n        assert_eq(one, wrapping_mul(one, one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, wrapping_mul(zero, two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, wrapping_mul(two_pow_64, zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, wrapping_mul(two_pow_64, one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, wrapping_mul(one, two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, wrapping_mul(two_pow_64, two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, wrapping_mul(u128_max, u128_max));\n    }\n}\n","path":"std/lib.nr"},"50":{"source":"fn abs(x: i8) -> u8 {\n    let mut output = x;\n    if (x <=0) {\n        output = - output;\n    }\n    output as u8\n}\n\nfn is_abs_sorted<let N: u32>(array: [ i8; N ]) {\n    for i in 1..array.len() {\n        assert( abs( array[i] ) >= abs( array[i-1] ), \"This array is not sorted by absolute value as the test requires.\");\n    };\n}\n\nfn set_contains_elem<let N: u32>(set: [i8;N] , elem: i8 ) -> bool {\n    let mut output = false;\n    for e in set {\n        if e == elem {\n            output = true\n        }\n    }\n    output\n}\n\nstruct SamplePosition {\n    sample_value: i8,\n    amount_of_samples: i8,\n    first_index: i8,\n    last_index: i8,\n}\n\n// NOTE while it's tempting to use a remainder array, it would have the same length padded with 0s, as we are forced to use a fixed size. Therefore, we opt for just reusing the same array.\n// NOTE only works on sorted arrays.\nfn group_equals<let N: u32>(sample_value: i8, array: [i8;N]) -> SamplePosition {\n    let mut amount: i8 = 0;\n    let mut first_index: i8 = 0;\n    let mut last_index: i8 = 0;\n    let mut bumped_on = false;\n    for index in 0..array.len() {\n        let current = array[index];\n        if current == sample_value {\n            amount+=1;\n            last_index = index as i8;\n            if !bumped_on {\n                bumped_on = true;\n                first_index = index as i8;\n            };\n        }\n    };\n    SamplePosition {\n        sample_value,\n        amount_of_samples: amount,\n        first_index,\n        last_index\n    }\n}\n\n/// This function will find the average between a range of numbers (min and max, inclusive on both ends). Thanks to integers being integers we can rely on a close summation formula and avoid using an `unconstrained` function.\nfn range_average(min: i8, max: i8) -> i8 {\n    let zero_to_min_sum: i8 = ( ( min - 1 ) * (min) ) / 2;\n    let zero_to_max_sum: i8 = ( max * (max + 1) ) / 2;\n    let range_sum: i8 = zero_to_max_sum - zero_to_min_sum;\n    let size: i8 = max - min + 1;\n    let average: i8 = range_sum / size;\n    average\n}\n\nfn assign_wilcox_scores<let N: u32>(sorted_array: [i8; N]) -> [i8; N] {\n    // following functions assume sorted data.\n    is_abs_sorted(sorted_array);\n\n    let sample_positions = sorted_array.map(|e| group_equals(e, sorted_array));\n    // we need to skip the repeated sample positions.\n    let mut scores_slice: [i8] = [];\n    for positions in sample_positions {\n        let average = range_average(positions.first_index + 1, positions.last_index + 1);\n        scores_slice = scores_slice.push_back(average);\n    }\n    let scores: [i8; N] = scores_slice.as_array();\n    scores\n}\n\nfn get_wilcoxon_t_statistic<let N: u32>(dataset: [i8; N]) -> i8 {\n    let scores = assign_wilcox_scores(dataset);\n    let mut statistic = 0;\n    for i in 0..dataset.len() {\n        if (dataset[i] > 0) {\n            statistic += scores[i];\n        }\n    };\n    statistic\n}\n\nfn main(statistic_threshold: i8, dataset: [i8; 9]) {\n    let statistic = get_wilcoxon_t_statistic(dataset);\n    println(\"statistic is\");\n    println(statistic);\n    assert( statistic < statistic_threshold );\n}\n\n#[test]\nfn test_abs() {\n    assert(8 == abs(8));\n    assert(8 == abs(-8));\n}\n\n#[test]\nfn test_is_abs_sorted() {\n    is_abs_sorted([0,1,2,3,4]);\n    is_abs_sorted([-1,-2,3,-5,5,5])\n}\n#[test(should_fail)]\nfn test_is_abs_sorted_fails() {\n    is_abs_sorted([6,1,2,3,4]);\n    is_abs_sorted([1,-2,3,5,5,5])\n}\n\n#[test]\nfn test_group_equals() {\n    let position = group_equals(2, [1,2,2,3,4]);\n    assert(position.amount_of_samples == 2);\n}\n\n#[test]\nfn test_set_contains_elem() {\n    let example = [1,2,3,4,5];\n    assert( set_contains_elem(example,1) );\n}\n\n#[test]\nfn test_range_average() {\n    let expected: i8 = 5;\n    let range = range_average(4,6);\n    assert( range == expected );\n}\n\n#[test]\nfn test_assign_wilcox_scores() {\n    let scores = assign_wilcox_scores([1,2,3,5,5,5]);\n    assert(scores == [1,2,3,5,5,5]);\n}\n\n#[test]\nfn statistic_calculation() {\n    let statistic = get_wilcoxon_t_statistic([ 5, 5, -7, -9, -10, -12, 15, 17, 20]);\n    println(f\"statistic is {statistic}\");\n    assert(statistic == 26)\n}\n\n#[test(should_fail)]\nfn test_rejection() {\n    main(15, [ 5, 5, -7, -9, -10, -12, 15, 17, 20])\n}\n#[test]\nfn test_verification() {\n    main(15, [ 1, -2, 3, -4, 5, -6, -7 , -8, -9])\n}\n","path":"/home/oc/Escritorio/noirhack/nonparametrical_tests_noir/src/main.nr"}},"names":["main"],"brillig_names":["print_unconstrained","print_unconstrained","directive_integer_quotient","directive_invert"]}