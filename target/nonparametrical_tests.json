{"noir_version":"1.0.0-beta.4+0044ffdfda7088bd14cf487b300ee3bfc00333e5","hash":"9719391760690851335","abi":{"parameters":[{"name":"statistic_threshold","type":{"kind":"integer","sign":"signed","width":8},"visibility":"public"},{"name":"dataset","type":{"kind":"array","length":9,"type":{"kind":"integer","sign":"signed","width":8}},"visibility":"private"}],"return_type":null,"error_types":{"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"17929169945533822981":{"error_kind":"string","string":"This array is not sorted by absolute value as the test requires."}}},"bytecode":"","debug_symbols":"","file_map":{"3":{"source":"use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    ///\n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    ///\n    /// example\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    ///\n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array along with its index,\n    /// returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.mapi(|i, a| i + a * 2);\n    /// assert_eq(b, [2, 5, 8]);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(i, self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// let mut i = 0;\n    /// a.for_each(|x| {\n    ///     b[i] = x;\n    ///     i += 1;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for i in 0..self.len() {\n            f(self[i]);\n        }\n    }\n\n    /// Applies a function to each element of this array along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// a.for_eachi(|i, x| {\n    ///     b[i] = x;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        for i in 0..self.len() {\n            f(i, self[i]);\n        }\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    ///\n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    ///\n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    ///\n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    ///\n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    ///\n    /// Requires the input array to be non-empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n\n    /// Concatenates this array with another array.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr1 = [1, 2, 3, 4];\n    ///     let arr2 = [6, 7, 8, 9, 10, 11];\n    ///     let concatenated_arr = arr1.concat(arr2);\n    ///     assert(concatenated_arr == [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    /// }\n    /// ```\n    pub fn concat<let M: u32>(self, array2: [T; M]) -> [T; N + M] {\n        let mut result = [crate::mem::zeroed(); N + M];\n        for i in 0..N {\n            result[i] = self[i];\n        }\n        for i in 0..M {\n            result[i + N] = array2[i];\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Ord + Eq,\n{\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a, b| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Eq,\n{\n    /// Returns a new sorted array by sorting it with a custom comparison function.\n    /// The original array remains untouched.\n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    ///\n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    ///\n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        // Safety: `sorted` array is checked to be:\n        // a. a permutation of `input`'s elements\n        // b. satisfying the predicate `ordering`\n        unsafe {\n            let sorted = quicksort::quicksort(self, ordering);\n\n            if !is_unconstrained() {\n                for i in 0..N - 1 {\n                    assert(\n                        ordering(sorted[i], sorted[i + 1]),\n                        \"Array has not been sorted correctly according to `ordering`.\",\n                    );\n                }\n                check_shuffle::check_shuffle(self, sorted);\n            }\n            sorted\n        }\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq([].map(|x| x + 1), []);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq([].mapi(|i, x| i * x + 1), []);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = [1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, [2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = [1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        let mut i = 0;\n        let i_ref = &mut i;\n        a.for_each(|x| {\n            b_ref[*i_ref] = x * 2;\n            *i_ref += 1;\n        });\n        assert_eq(b, [2, 4, 6]);\n        assert_eq(i, 3);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { b_ref[i] = i + a * 2; });\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn concat() {\n        let arr1 = [1, 2, 3, 4];\n        let arr2 = [6, 7, 8, 9, 10, 11];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    }\n\n    #[test]\n    fn concat_zero_length_with_something() {\n        let arr1 = [];\n        let arr2 = [1];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_something_with_zero_length() {\n        let arr1 = [1];\n        let arr2 = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_zero_lengths() {\n        let arr1: [Field; 0] = [];\n        let arr2: [Field; 0] = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, []);\n    }\n}\n","path":"std/array/mod.nr"},"50":{"source":"fn abs(x: i8) -> u8 {\n    let mut output = x;\n    if (x <=0) {\n        output = - output;\n    }\n    output as u8\n}\n\nfn is_abs_sorted<let N: u32>(array: [ i8; N ]) {\n    for i in 1..array.len() {\n        assert( abs( array[i] ) >= abs( array[i-1] ), \"This array is not sorted by absolute value as the test requires.\");\n    };\n}\n\nfn set_contains_elem<let N: u32>(set: [i8;N] , elem: i8 ) -> bool {\n    let mut output = false;\n    for e in set {\n        if e == elem {\n            output = true\n        }\n    }\n    output\n}\n\nstruct SamplePosition {\n    sample_value: i8,\n    amount_of_samples: i8,\n    first_index: i8,\n    last_index: i8,\n}\n\n// NOTE while it's tempting to use a remainder array, it would have the same length padded with 0s, as we are forced to use a fixed size. Therefore, we opt for just reusing the same array.\n// NOTE only works on sorted arrays.\nfn group_equals<let N: u32>(sample_value: i8, array: [i8;N]) -> SamplePosition {\n    let mut amount: i8 = 0;\n    let mut first_index: i8 = 0;\n    let mut last_index: i8 = 0;\n    let mut bumped_on = false;\n    for index in 0..array.len() {\n        let current = array[index];\n        if current == sample_value {\n            amount+=1;\n            last_index = index as i8;\n            if !bumped_on {\n                bumped_on = true;\n                first_index = index as i8;\n            };\n        }\n    };\n    SamplePosition {\n        sample_value,\n        amount_of_samples: amount,\n        first_index,\n        last_index\n    }\n}\n\nunconstrained fn average(slice: [i8]) -> i8 {\n    slice.reduce(|a,b| a + b) / ( slice.len() as i8 )\n}\n\n// fn integer_range(min: i8, max: i8) -> [i8] {\n//     let mut output: [i8] = &[];\n//     for elem in min..=max {\n//         output = output.push_back(elem);\n//     };\n//     output\n// }\n\nfn range_average(min: i8, max: i8) -> i8 {\n    let zero_to_min_sum: i8 = ( min * (min + 1) ) / 2;\n    let zero_to_max_sum: i8 = ( max * (max + 1) ) / 2;\n    let range_sum = zero_to_max_sum - zero_to_min_sum;\n    let size = max - min;\n    let average: i8 = range_sum / size;\n    average\n}\n\nfn assign_wilcox_scores<let N: u32>(sorted_array: [i8; N]) -> [i8; N] {\n    // following functions assume sorted data.\n    is_abs_sorted(sorted_array);\n\n    let sample_positions = sorted_array.map(|e| group_equals(e, sorted_array));\n    // we need to skip the repeated sample positions.\n    let mut scores_slice: [i8] = [];\n    for positions in sample_positions {\n        let average = range_average(positions.first_index + 1, positions.last_index + 1);\n        scores_slice = scores_slice.push_back(average);\n    }\n    let scores: [i8; N] = scores_slice.as_array();\n    scores\n}\n\nfn get_wilcoxon_t_statistic<let N: u32>(dataset: [i8; N]) -> i8 {\n    let scores = assign_wilcox_scores(dataset);\n    let mut statistic = 0;\n    for i in 0..dataset.len() {\n        if (dataset[i] > 0) {\n            statistic += scores[i];\n        }\n    };\n    statistic\n}\n\nfn main(statistic_threshold: pub i8, dataset: [i8; 9]) {\n    let statistic = get_wilcoxon_t_statistic(dataset);\n    assert( statistic <= statistic_threshold );\n}\n\n#[test]\nfn test_abs() {\n    assert(8 == abs(8));\n    assert(8 == abs(-8));\n}\n\n#[test]\nfn test_is_abs_sorted() {\n    is_abs_sorted([0,1,2,3,4]);\n    is_abs_sorted([-1,-2,3,-5,5,5])\n}\n#[test(should_fail)]\nfn test_is_abs_sorted_fails() {\n    is_abs_sorted([6,1,2,3,4]);\n    is_abs_sorted([1,-2,3,5,5,5])\n}\n\n#[test]\nfn test_group_equals() {\n    let position = group_equals(2, [1,2,2,3,4]);\n    assert(position.amount_of_samples == 2);\n}\n\n#[test]\nfn test_set_contains_elem() {\n    let example = [1,2,3,4,5];\n    assert( set_contains_elem(example,1) );\n}\n\n#[test]\nfn test_average() {\n    // Safety: this is a test!\n    unsafe { assert(average([4,5,6]) == 5) };\n    // Safety: this is a test!\n    unsafe { assert(average([4]) == 4) };\n}\n\n// #[test]\n// fn test_integer_range() {\n//     let expected: [i8; 3] = [4,5,6];\n//     let observed = integer_range(4,6);\n//     assert( observed.as_array() == expected )\n// }\n\n#[test]\nfn test_range_average() {\n    let expected: i8 = 5;\n    let range = range_average(4,6);\n    println(\"range\");\n    println(range);\n    assert( range == expected );\n}\n\n#[test]\nfn test_assign_wilcox_scores() {\n    let scores = assign_wilcox_scores([1,2,3,5,5,5]);\n    println(\"scores\");\n    println(scores);\n    assert(scores == [1,2,3,5,5,5]);\n}\n\n#[test]\nfn statistic_calculation() {\n    let statistic = get_wilcoxon_t_statistic([ 5, 5, -7, -9, -10, -12, 15, 17, 20]);\n    println(f\"statistic is {statistic}\");\n    assert(statistic == 26)\n}\n\n#[test(should_fail)]\nfn test_rejection() {\n    main(15, [ 5, 5, -7, -9, -10, -12, 15, 17, 20])\n}\n#[test]\nfn test_verification() {\n    main(15, [ 1, -2, 3, -4, 5, -6, -7 , -8, -9])\n}\n","path":"/home/oc/Escritorio/noirhack/nonparametrical_tests/src/main.nr"}},"names":["main"],"brillig_names":["directive_integer_quotient","directive_invert"]}